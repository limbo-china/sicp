#lang racket
;;;use the processes of exercise 2.2
(define (make-point x y)
  (cons x y))
(define (make-segment x1 y1 x2 y2)
  (cons (make-point x1 y1) (make-point x2 y2)))
(define (x-point p)
  (car p))
(define (y-point p)
  (cdr p))
(define (start-segment s)
  (car s))
(define (end-segment s)
  (cdr s))
(define (print-point p)
  (newline)
  (display "(")
  (display (x-point p))
  (display ",")
  (display (y-point p))
  (display ")"))

;;;make rectangle
(define (make-rectangle length1 length2 width1 width2)
  (cons (cons length1 length2)
        (cons width1 width2)))

;;;get ordered-pair length and width of rectangle
(define (length1-of-rec r)
  (car(car r)))
(define (length2-of-rec r)
  (cdr(car r)))
(define (width1-of-rec r)
  (car(cdr r)))
(define (width2-of-rec r)
  (cdr(cdr r)))

;;;get length of rectangle
(define (length-of-rectangle r)
  (let((length (length1-of-rec r)))
    (let((start (start-segment length))
         (end (end-segment length)))
      (- (x-point end)(x-point start)))))
;;;get width of rectangle
(define (width-of-rectangle r)
  (let((width (width1-of-rec r)))
    (let((start (start-segment width))
         (end (end-segment width)))
      (- (y-point end)(y-point start)))))
;;;calculate the perimeter of rectangle
(define (perimeter-of-rectangle r)
  (let((length (length-of-rectangle r))
       (width (width-of-rectangle r)))
    (*(+ length width)2)))
;;;calculate the area of rectangle
(define (area-of-rectangle r)
  (let((length(length-of-rectangle r))
       (width (width-of-rectangle r)))
    (* length width)))
;;;print rectangle
(define (print-rectangle r)
    (let ((l1 (length1-of-rec r))
          (l2 (length2-of-rec r))
          (w1 (width1-of-rec r))
          (w2 (width2-of-rec r)))
      (newline)
      (display "length1:")
      (print-point (start-segment l1))
      (print-point (end-segment l1))
      (newline)
      (display "length2:")
      (print-point (start-segment l2))
      (print-point (end-segment l2))
      (newline)
      (display "width1:")
      (print-point (start-segment w1))
      (print-point (end-segment w1))
      (newline)
      (display "width2:")
      (print-point (start-segment w2))
      (print-point (end-segment w2))))

;;;test rectangle (1,4) (4,4) (1,2) (4,2)
(define length1 (make-segment 1 4 4 4))
(define length2 (make-segment 1 2 4 2))
(define width1 (make-segment 1 2 1 4))
(define width2 (make-segment 4 2 4 4))
(define rec (make-rectangle length1 length2 width1 width2))
(print-rectangle rec)
(perimeter-of-rectangle rec)
(area-of-rectangle rec)

