#lang racket
(define (make-point x y)
  (cons x y))
(define (x-point p)
  (car p))
(define (y-point p)
  (cdr p))
(define (make-segment x1 y1 x2 y2)
  (cons (make-point x1 y1) (make-point x2 y2)))
(define (start-segment s)
  (car s))
(define (end-segment s)
  (cdr s))
(define (midpoint-segment s)
  (make-point (/ (+(x-point(start-segment s))(x-point(end-segment s)))2)
              (/ (+(y-point(start-segment s))(y-point(end-segment s)))2)))
(define (print-point p)
  (newline)
  (display "(")
  (display (x-point p))
  (display ",")
  (display (y-point p))
  (display ")"))
(print-point (midpoint-segment(make-segment 1 1 2 2)))
(print-point (midpoint-segment(make-segment 1 3 4 3)))